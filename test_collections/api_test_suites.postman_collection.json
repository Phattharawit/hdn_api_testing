{
	"info": {
		"_postman_id": "5d4a010e-c0e2-411d-b2f4-79e1d6c7a87b",
		"name": "api_test_suites",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetMessageList",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e433604c-271e-4a6e-a114-d962099258c4",
						"exec": [
							"pm.test(\"message_found_return_200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"message_found_return_correct_json\", function () {\r",
							"    pm.response.to.have.jsonBody(\"Data\");  //json must contain property 'Data'\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{service_url}}/api/messages",
					"host": [
						"{{service_url}}"
					],
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetMessageByValidFileName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8f0e238-e17d-44b4-907b-2e73a5ff0c66",
						"exec": [
							"pm.test(\"message_found_return_200\", function () {\r",
							"    //assert status code is 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"message_notfound_return_error_message\", function () {\r",
							"    //assert json response contain \"Data\"\r",
							"    pm.response.to.have.jsonBody(\"Data\");\r",
							"});\r",
							" \r",
							"pm.test(\"response_json_correct_format\", function () {\r",
							"    \r",
							"    var jsonData = pm.response.json();\r",
							"    var responseModel = jsonData.Data;\r",
							"    \r",
							"    //expected model\r",
							"    var model = {\r",
							"        Action: null,\r",
							"        Base64String: null,\r",
							"        FileName: null,\r",
							"        FileType: null,\r",
							"        MessageType: null\r",
							"    }\r",
							"    \r",
							"    for (var propName in responseModel) {\r",
							"        //assert response model spec are identical with our model\r",
							"       pm.expect(model.hasOwnProperty(propName)).to.equal(true);  \r",
							"    }\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{service_url}}/api/messages/LX_1534415074",
					"host": [
						"{{service_url}}"
					],
					"path": [
						"api",
						"messages",
						"LX_1534415074"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetMessageByInvalidFileName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57951f60-2374-4eed-a521-805fc087a3b7",
						"exec": [
							"pm.test(\"message_notfound_return_404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"message_notfound_return_error_message\", function () {\r",
							"    pm.response.to.have.jsonBody(\"Data.ExceptionMessage\");  //json must contain property 'ExceptionMessage'\r",
							"});\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{service_url}}/api/messages/ss",
					"host": [
						"{{service_url}}"
					],
					"path": [
						"api",
						"messages",
						"ss"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUnProcessedLxMessage",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{service_url}}/api/messages",
					"host": [
						"{{service_url}}"
					],
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		}
	]
}